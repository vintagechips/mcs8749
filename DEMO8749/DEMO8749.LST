    1                   ;       DEMO8749 - MCS8749 PROGRAMING EXAMPLES
    2                   ;       WRITTEN BY TETSUYA SUZUKI
    3                   ;       MIT LICENSE
    4                   ;
    5                   ;       SEGMENT DEFINITION (MACHINE-DEPENDENT)
    6 007F              SEGA       EQU      01111111B
    7 00BF              SEGB       EQU      10111111B
    8 00F7              SEGC       EQU      11110111B
    9 00FE              SEGD       EQU      11111110B
   10 00FB              SEGE       EQU      11111011B
   11 00DF              SEGF       EQU      11011111B
   12 00EF              SEGG       EQU      11101111B
   13 00FD              SEGP       EQU      11111101B
   14                   ;
   15                   ;       NUMERIC IMAGE
   16 0012              FON0       EQU      SEGA&SEGB&SEGC&SEGD&SEGE&SEGF
   17 00B7              FON1       EQU      SEGB&SEGC
   18 002A              FON2       EQU      SEGA&SEGB&SEGD&SEGE&SEGG
   19 0026              FON3       EQU      SEGA&SEGB&SEGC&SEGD&SEGG
   20 0087              FON4       EQU      SEGB&SEGC&SEGF&SEGG
   21 0046              FON5       EQU      SEGA&SEGC&SEGD&SEGF&SEGG
   22 0042              FON6       EQU      SEGA&SEGC&SEGD&SEGE&SEGF&SEGG
   23 0037              FON7       EQU      SEGA&SEGB&SEGC
   24 0002              FON8       EQU      SEGA&SEGB&SEGC&SEGD&SEGE&SEGF&SEGG
   25 0006              FON9       EQU      SEGA&SEGB&SEGC&SEGD&SEGF&SEGG
   26 0003              FONA       EQU      SEGA&SEGB&SEGC&SEGE&SEGF&SEGG
   27 00C2              FONB       EQU      SEGC&SEGD&SEGE&SEGF&SEGG
   28 005A              FONC       EQU      SEGA&SEGD&SEGE&SEGF
   29 00A2              FOND       EQU      SEGB&SEGC&SEGD&SEGE&SEGG
   30 004A              FONE       EQU      SEGA&SEGD&SEGE&SEGF&SEGG
   31 004B              FONF       EQU      SEGA&SEGE&SEGF&SEGG
   32 00FF              FONN       EQU      0FFH
   33                   ;
   34                   ;       UPPER HALF IMAGE
   35 00E3              TOP0       EQU      SEGC&SEGE&SEGG
   36 00F7              TOP1       EQU      SEGC
   37 00E6              TOP2       EQU      SEGC&SEGD&SEGG
   38 00E6              TOP3       EQU      SEGC&SEGD&SEGG
   39 00F2              TOP4       EQU      SEGC&SEGD&SEGE
   40 00EA              TOP5       EQU      SEGD&SEGE&SEGG
   41 00EA              TOP6       EQU      SEGD&SEGE&SEGG
   42 00E7              TOP7       EQU      SEGC&SEGG
   43 00E2              TOP8       EQU      SEGC&SEGD&SEGE&SEGG
   44 00E2              TOP9       EQU      SEGC&SEGD&SEGE&SEGG
   45 00E2              TOPA       EQU      SEGC&SEGD&SEGE&SEGG
   46 00FA              TOPB       EQU      SEGD&SEGE
   47 00EB              TOPC       EQU      SEGE&SEGG
   48 00FA              TOPD       EQU      SEGD&SEGE
   49 00EA              TOPE       EQU      SEGD&SEGE&SEGG
   50 00EA              TOPF       EQU      SEGD&SEGE&SEGG
   51                   ;
   52                   ;       LOWER HALF IMAGE
   53 008F              BOT0       EQU      SEGB&SEGF&SEGG
   54 00BF              BOT1       EQU      SEGB
   55 004F              BOT2       EQU      SEGA&SEGF&SEGG
   56 002F              BOT3       EQU      SEGA&SEGB&SEGG
   57 003F              BOT4       EQU      SEGA&SEGB
   58 002F              BOT5       EQU      SEGA&SEGB&SEGG
   59 000F              BOT6       EQU      SEGA&SEGB&SEGF&SEGG
   60 00BF              BOT7       EQU      SEGB
   61 000F              BOT8       EQU      SEGA&SEGB&SEGF&SEGG
   62 002F              BOT9       EQU      SEGA&SEGB&SEGG
   63 001F              BOTA       EQU      SEGA&SEGB&SEGF
   64 000F              BOTB       EQU      SEGA&SEGB&SEGF&SEGG
   65 00CF              BOTC       EQU      SEGF&SEGG
   66 000F              BOTD       EQU      SEGA&SEGB&SEGF&SEGG
   67 004F              BOTE       EQU      SEGA&SEGF&SEGG
   68 005F              BOTF       EQU      SEGA&SEGF
   69                   ;
   70                   ;       RESET VECTOR
   71 0000                         ORG      00H
   72 0000 2400                    JMP      INIT        ; JUMP MAIN ROUTINE
   73                   ;
   74                   ;       EXTERNAL INTERRUPT VECTOR
   75 0003                         ORG      03H
   76 0003 93                      RETR                 ; DO NOTHING
   77                   ;
   78                   ;       TIMER INTERRUPT VECTOR
   79 0007                         ORG      07H
   80 0007 2455                    JMP      TINT
   81                   ;
   82                   ;       DELY
   83                   ;       WAIT UNTIL TICK COUNTS MATCH
   84                   ;       R2: TICK COUNT (INCREMENTED BY 45Hz)
   85 0009 B820         DLAY:      MOV      R0,#TICK    ; TICK POINTER
   86 000B B000                    MOV      @R0,#00H    ; CLEAR TICK
   87 000D FA           L002       MOV      A,R2        ; GET PARAM
   88 000E 1414                    CALL     PTON        ; CONVERT TO NEGATIVE
   89 0010 60                      ADD      A,@R0       ; SAME AS SUBTRACTION
   90 0011 E60D                    JNC      L002        ; WAIT FOR TICK > R2
   91 0013 93                      RETR
   92                   ;
   93                   ;       PTON
   94                   ;       CONVERT POSITIVE TO NEGATIVE
   95                   ;       A: NUMERIC
   96 0014 37           PTON:      CPL      A           ; CONVERT STEP1
   97 0015 17                      INC      A           ; CONVERT STEP2
   98 0016 93                      RETR
   99                   ;
  100                   ;       BADD
  101                   ;       BINARY ADDITION
  102                   ;       R1: 2 BYTES AUGEND POINTER
  103                   ;       R2: ADDEND
  104 0017 FA           BADD:      MOV      A,R2
  105 0018 61                      ADD      A,@R1
  106 0019 A1                      MOV      @R1,A
  107 001A E61E                    JNC      L014
  108 001C C9                      DEC      R1
  109 001D 11                      INC      @R1
  110 001E 93           L014       RETR
  111                   ;
  112                   ;       BSUB
  113                   ;       BINARY SUBTRACTION
  114                   ;       R1: 2 BYTES MINUEND POINTER
  115                   ;       R2: SUBTRAHEND
  116 001F FA           BSUB:      MOV      A,R2
  117 0020 1414                    CALL     PTON
  118 0022 61                      ADD      A,@R1
  119 0023 A1                      MOV      @R1,A
  120 0024 F62A                    JC       L015
  121 0026 C9                      DEC      R1
  122 0027 F1                      MOV      A,@R1
  123 0028 07                      DEC      A
  124 0029 A1                      MOV      @R1,A
  125 002A 93           L015       RETR
  126                   ;
  127                   ;       DADD
  128                   ;       DECIMAL ADDITION
  129                   ;       R1: LOWER OF 2 BYTES AUGEND POINTER
  130                   ;       R2: ADDEND
  131 002B FA           DADD:      MOV      A,R2        ; GET ADDEND
  132 002C 61                      ADD      A,@R1       ; ADD LOWER AUGEND
  133 002D 57                      DA       A           ; DECIMAL ADJUST
  134 002E A1                      MOV      @R1,A       ; STORE RESULT
  135 002F E637                    JNC      L011        ; IF NOT CARRY, RETURN
  136 0031 C9                      DEC      R1          ; UPPER BYTE
  137 0032 2301                    MOV      A,#1        ; GET 1
  138 0034 61                      ADD      A,@R1       ; ADD UPPER AUGEND
  139 0035 57                      DA       A           ; DECIMAL ADJUST
  140 0036 A1                      MOV      @R1,A       ; STORE RESULT
  141 0037 93           L011       RETR
  142                   ;
  143                   ;       DSUB
  144                   ;       DECIMAL SUBTRACTION
  145                   ;       R1: LOWER OF 2 BYTES MINUEND POINTER
  146                   ;       R2: SUBTRAHEND
  147 0038 FA           DSUB:      MOV      A,R2        ; GET SUBTRAHEND
  148 0039 1414                    CALL     PTON        ; CONVERT POSITIVE TO N
  149 003B 039A                    ADD      A,#9AH      ; ADD MAGIC NUMBER
  150 003D 61                      ADD      A,@R1       ; SUBTRACT LOWER MINUEN
  151 003E 57                      DA       A           ; DECIMAL ADJUST
  152 003F A1                      MOV      @R1,A       ; STORE RESULT
  153 0040 F648                    JC       L013        ; IF CARRY, RETURN
  154 0042 C9                      DEC      R1          ; UPPER BYTE
  155 0043 2399                    MOV      A,#99H      ; MAGIC NUMBER
  156 0045 61                      ADD      A,@R1       ; ADD UPPER MINUEND
  157 0046 57                      DA       A           ; DECIMAL ADJUST
  158 0047 A1                      MOV      @R1,A       ; STORE RESULT
  159 0048 93           L013       RETR
  160                   ;
  161                   ;       DCHG
  162                   ;       DISPLAY CHANGE BY TEMPORARY IMAGE
  163 0049 B825         DCHG:      MOV      R0,#TIMG    ; TEMPORARY IMAGE POINT
  164 004B B921                    MOV      R1,#VRAM    ; VRAM BASE ADDRESS
  165 004D BF04                    MOV      R7,#4       ; DIGIT COUNTER (4 TO 1
  166 004F FE                      MOV      A,R6        ; COPY STEP 1
  167 0050 AD                      MOV      R5,A        ; COPY STEP 2
  168 0051 FD           L005       MOV      A,R5        ; GET UPDATE FLAG
  169 0052 67                      RRC      A           ; CHECK LSB
  170 0053 AD                      MOV      R5,A        ; SAVE FOR NEXT
  171 0054 E658                    JNC      L006        ; IF LSB=0, DO NOTHING
  172 0056 F0                      MOV      A,@R0       ; GET TEMPORARY IMAGE
  173 0057 A1                      MOV      @R1,A       ; SAVE IT VRAM
  174 0058 18           L006       INC      R0          ; NEXT TEMPORARY IMAGE
  175 0059 19                      INC      R1          ; NEXT VRAM ADDRESS
  176 005A EF51                    DJNZ     R7,L005     ; LOOP DIGIT 4 TO 1
  177 005C 93                      RETR
  178                   ;
  179                   ;       PUTN
  180                   ;       DISPLAY NUMERIC
  181 005D B821         PUTN:      MOV      R0,#VRAM    ; VRAM POINTER
  182 005F B929                    MOV      R1,#NNOW    ; NUMERIC POINTER
  183 0061 BA24                    MOV      R2,#FTBL    ; FONT TABLE
  184 0063 BB77                    MOV      R3,#TPNC    ; COMMAND TABLE
  185                   ;
  186                   ;       NTOI
  187                   ;       NUMERIC TO IMAGE
  188 0065 BF04         NTOI:      MOV      R7,#4       ; DIGIT COUNTER (4 TO 1
  189 0067 1472         L007       CALL     BREN        ; BRANCH COMMAND FOR EA
  190 0069 530F                    ANL      A,#0FH      ; GET DIGIT NUMBER
  191 006B 6A                      ADD      A,R2        ; FONT TABLE LOOKUP
  192 006C E3                      MOVP3    A,@A        ; GET FONT
  193 006D A0                      MOV      @R0,A       ; STORE FONT
  194 006E 18                      INC      R0          ; NEXT DIGIT
  195 006F EF67                    DJNZ     R7,L007     ; LOOP
  196 0071 93                      RETR
  197                   ;
  198                   ;       BREN
  199                   ;       BRANCH COMMAND FOR EACH NIBBLE
  200 0072 FF           BREN:      MOV      A,R7        ; GET DIGIT
  201 0073 5301                    ANL      A,#01H      ; UPPER OR LOWER NIBBLE
  202 0075 6B                      ADD      A,R3        ; COMMAND TABLE SETUP
  203 0076 B3                      JMPP     @A          ; JUMP SUB COMMAND
  204                   ;
  205                   ;       PUTN SUB COMMAND VECTOR TABLE
  206 0077 79           TPNC       DB       PNC1        ; UPPER NIBBLE
  207 0078 7C                      DB       PNC2        ; LOWER NIBBLE
  208                   ;
  209                   ;       FOR UPPER NIBBLE
  210 0079 F1           PNC1:      MOV      A,@R1       ; GET BYTE
  211 007A 47                      SWAP     A           ; SWAP NIBBLE
  212 007B 93                      RETR                 ; BACK
  213                   ;
  214                   ;       FOR LOWER NIBBLE
  215 007C F1           PNC2:      MOV      A,@R1       ; GET BYTE
  216 007D 19                      INC      R1          ; NEXT BYTE
  217 007E 93                      RETR                 ; BACK
  218                   ;
  219                   ;       PUTS
  220                   ;       CHANGE DISPLAY WITH ANIMATION
  221 007F B82B         PUTS:      MOV      R0,#NNEW    ; NEW NUMBER
  222 0081 B929                    MOV      R1,#NNOW    ; CURRENT NUMBER
  223 0083 BBD9                    MOV      R3,#TPSC    ; COMMAND TABLE
  224                   ;
  225                   ;       SETUP UPDATE FLAG TO R6
  226 0085 BE00                    MOV      R6,#00H     ; CLEAR FLAGS
  227 0087 BF04                    MOV      R7,#4       ; DIGIT COUNTER (4 TO 1
  228 0089 FE           L003       MOV      A,R6        ; ROTATE RIGHT STEP1
  229 008A 77                      RR       A           ; ROTATE RIGHT STEP2
  230 008B AE                      MOV      R6,A        ; ROTATE RIGHT STEP3
  231 008C 1472                    CALL     BREN        ; BRANCH COMMAND FOR EA
  232 008E 530F                    ANL      A,#0FH      ; GET COMPARE RESULT
  233 0090 C696                    JZ       L004        ; IF EQUAL, DO NOTHING
  234 0092 FE                      MOV      A,R6        ; BIT SET STEP1
  235 0093 4308                    ORL      A,#08H      ; BIT SET STEP2
  236 0095 AE                      MOV      R6,A        ; BIT SET STEP3
  237 0096 EF89         L004       DJNZ     R7,L003     ; LOOP DIGIT 4 TO 1
  238                   ;
  239                   ;       FLAME OUT
  240 0098 B825                    MOV      R0,#TIMG    ; TEMPORARY IMAGE POINT
  241 009A B929                    MOV      R1,#NNOW    ; NUMERIC POINTER
  242 009C BA04                    MOV      R2,#LTBL    ; FONT TABLE POINTER
  243 009E BB77                    MOV      R3,#TPNC    ; COMMAND TABLE
  244 00A0 1465                    CALL     NTOI        ; SETUP TEMPORARY IMAGE
  245 00A2 1449                    CALL     DCHG        ; DISPLAY CHANGE BY TEM
  246 00A4 BA04                    MOV      R2,#4       ; FOR 4/45 SEC,
  247 00A6 1409                    CALL     DLAY        ; MAINTAIN DISPLAY
  248                   ;
  249                   ;       BLANK
  250 00A8 BF04                    MOV      R7,#4
  251 00AA B921                    MOV      R1,#VRAM    ; VRAM BASE ADDRESS
  252 00AC FE                      MOV      A,R6        ; COPY STEP 1
  253 00AD AD                      MOV      R5,A        ; COPY STEP 2
  254 00AE FD           L008       MOV      A,R5        ; GET UPDATE FLAG
  255 00AF 67                      RRC      A           ; CHECK LSB
  256 00B0 AD                      MOV      R5,A        ; SAVE FOR NEXT
  257 00B1 E6B5                    JNC      L012        ; IF LSB=0, DO NOTHING
  258 00B3 B1FF                    MOV      @R1,#FONN   ; BLANK
  259 00B5 19           L012       INC      R1          ; NEXT DIGIT
  260 00B6 EFAE                    DJNZ     R7,L008     ; LOOP DIGIT 4 TO 1
  261 00B8 BA08                    MOV      R2,#8       ; FOR 8/45 SEC,
  262 00BA 1409                    CALL     DLAY        ; MAINTAIN DISPLAY
  263                   ;
  264                   ;       FLAME IN
  265 00BC B825                    MOV      R0,#TIMG    ; TEMPORARY IMAGE POINT
  266 00BE B92B                    MOV      R1,#NNEW    ; NEW NUMBER  POINTER
  267 00C0 BA14                    MOV      R2,#UTBL    ; FONT TABLE POINTER
  268 00C2 BB77                    MOV      R3,#TPNC    ; COMMAND TABLE
  269 00C4 1465                    CALL     NTOI        ; SETUP TEMPORARY IMAGE
  270 00C6 1449                    CALL     DCHG        ; DISPLAY CHANGE BY TEM
  271 00C8 BA04                    MOV      R2,#4       ; FOR 4/45 SEC,
  272 00CA 1409                    CALL     DLAY        ; MAINTAIN DISPLAY
  273                   ;
  274                   ;       UPDATE NUMERIC
  275 00CC B829         UPDN:      MOV      R0,#NNOW    ; CURRENT NUMERIC POINT
  276 00CE B92B                    MOV      R1,#NNEW    ; UPDATE NUMERIC POINTE
  277 00D0 F1                      MOV      A,@R1       ; GET UPDATE NUMERIC
  278 00D1 A0                      MOV      @R0,A       ; PUT CURRENT NUMERIC
  279 00D2 18                      INC      R0          ; NEXT BYTE
  280 00D3 19                      INC      R1          ; NEXT BYTE
  281 00D4 F1                      MOV      A,@R1       ; GET UPDATE NUMERIC
  282 00D5 A0                      MOV      @R0,A       ; PUT CURRENT NUMERIC
  283 00D6 145D                    CALL     PUTN        ; DISPLAY NUMERIC
  284 00D8 93                      RETR
  285                   ;
  286                   ;       PUTS SUB COMMAND VECTOR TABLE
  287 00D9 DB           TPSC       DB       PSC1        ; UPPER NIBBLE
  288 00DA E0                      DB       PSC2        ; LOWER NIBBLE
  289                   ;
  290                   ;       FOR UPPER NIBBLE
  291 00DB F0           PSC1:      MOV      A,@R0       ; GET NEW NUMBER
  292 00DC D1                      XRL      A,@R1       ; COMPARE CURRENT NUMBE
  293 00DD AA                      MOV      R2,A        ; SAVE RESULT
  294 00DE 47                      SWAP     A           ; SWAP NIBBLE
  295 00DF 93                      RETR                 ; BACK
  296                   ;
  297                   ;       FOR LOWER NIBBLE
  298 00E0 FA           PSC2:      MOV      A,R2        ; RESTORE COMPARE RESUL
  299 00E1 18                      INC      R0          ; NEXT BYTE
  300 00E2 19                      INC      R1          ; NEXT BYTE
  301 00E3 93                      RETR                 ; BACK
  302                   ;
  303                   ;       MAIN ROUTINE
  304 0100                         ORG      100H
  305 0100 9A0F         INIT:      ANL      P2,#0FH     ; TURN OFF ALL DIGIT
  306 0102 65                      STOP     TCNT        ; STOP TIMER
  307 0103 00                      NOP                  ; CLEAR TIMER FLAG
  308                   ;
  309 0104 D5                      SEL      RB1         ; SELECT SUB RESISTER B
  310 0105 B820                    MOV      R0,#TICK    ; SET TICK POINTER
  311 0107 BF00                    MOV      R7,#0       ; INITIAL DIGIT NUMBER
  312 0109 C5                      SEL      RB0         ; RESTORE RESISTER BANK
  313                   ;
  314 010A 25                      EN       TCNTI       ; ENABLE TIMER INTERRUP
  315 010B 55                      STRT     T           ; START TIMER
  316                   ;
  317                   ;       INITIAL DISPLAY
  318 010C B929                    MOV      R1,#NNOW    ; CURRENT NUMERIC POINT
  319 010E B182                    MOV      @R1,#82H    ; SET 82H
  320 0110 19                      INC      R1          ; NEXT DIGIT
  321 0111 B143                    MOV      @R1,#43H    ; SET 43H
  322 0113 145D                    CALL     PUTN        ; DISPLAY CURRENT NUMER
  323 0115 BA2D                    MOV      R2,#45      ; FOR 45/45 SEC,
  324 0117 1409                    CALL     DLAY        ; MAINTAIN DISPLAY
  325                   ;
  326                   ;       COUNT UP/DOWN
  327 0119 B92B                    MOV      R1,#NNEW    ; UPDATE NUMERIC POINTE
  328 011B B100                    MOV      @R1,#00H    ; SET 0
  329 011D 19                      INC      R1          ; NEXT DIGIT
  330 011E B100                    MOV      @R1,#00H    ; SET 0
  331 0120 14CC                    CALL     UPDN        ; UPDATE NUMERIC
  332 0122 1409         TEST:      CALL     DLAY        ; MAINTAIN DISPLAY
  333 0124 B92C                    MOV      R1,#NNEW+1  ; LOWER OF 2 BYTES POIN
  334 0126 BA05                    MOV      R2,#5       ; COUNT STEP
  335 0128 2638                    JNT0     L016        ; IF T0 PUSHED, JUMP
  336 012A BA01                    MOV      R2,#1       ; COUNT STEP
  337 012C 4640                    JNT1     L017        ; IF T1 PUSHED, JUMP
  338                   ;
  339 012E 3448                    CALL     BLINK       ; 8243 P5/BIT1 CONTROL
  340 0130 142B                    CALL     DADD        ; DECIMAL ADDITION
  341 0132 147F                    CALL     PUTS        ; CHANGE DISPLAY WITH A
  342 0134 BA2D                    MOV      R2,#45      ; FOR 45/45 SEC,
  343 0136 2422                    JMP      TEST
  344 0138 142B         L016       CALL     DADD        ; DECIMAL ADDITION
  345 013A 14CC                    CALL     UPDN        ; UPDATE NUMERIC
  346 013C BA01                    MOV      R2,#1       ; FOR 1/45 SEC,
  347 013E 2422                    JMP      TEST
  348 0140 1438         L017       CALL     DSUB        ; DECIMAL SUBTRACTION
  349 0142 14CC                    CALL     UPDN        ; UPDATE NUMERIC
  350 0144 BA05                    MOV      R2,#5       ; FOR 5/45 SEC,
  351 0146 2422                    JMP      TEST
  352                   ;
  353                   ;       8243 P5/BIT1 CONTROL
  354 0148 F1           BLINK:     MOV      A,@R1       ; GET UPDATE NUMERIC
  355 0149 5301                    ANL      A,#01H      ; CHECK EVEN/ODD
  356 014B C651                    JZ       L018        ; SKIP IF EVEN (IT MEAN
  357 014D 2302                    MOV      A,#02H      ; LED OFF
  358 014F 8D                      ORLD     P5,A        ; WRITE P5
  359 0150 93                      RETR
  360 0151 230D         L018       MOV      A,#0DH      ; LED ON
  361 0153 9D                      ANLD     P5,A        ; WRITE P5
  362 0154 93                      RETR
  363                   ;
  364                   ;       TIMER INTERRUPT SERVICE ROUTINE
  365                   ;       DISPLAY VRAM IMAGE, AND COUNT UP TICK
  366 0155 D5           TINT:      SEL      RB1         ; SELECT SUB RESISTER B
  367 0156 2303                    MOV      A,#03H      ; USE LOWER 2 BITS
  368 0158 5F                      ANL      A,R7        ; GET DIGIT NUMBER(0-3)
  369 0159 AF                      MOV      R7,A        ; SAVE DIGIT NUMBER
  370 015A 965D                    JNZ      L001        ; ONCE PER 4 TIMES,
  371 015C 10                      INC      @R0         ; INCREMENT TICK
  372                   ;
  373 015D B921         L001       MOV      R1,#VRAM    ; VRAM BASE ADDRESS
  374 015F 69                      ADD      A,R1        ; VRAM DIGIT POINTER
  375 0160 A9                      MOV      R1,A        ; SET IT TO R1
  376                   ;
  377 0161 9A0F                    ANL      P2,#0FH     ; TURN OFF ALL DIGIT
  378 0163 F1                      MOV      A,@R1       ; GET SEGMENT IMAGE
  379 0164 39                      OUTL     P1,A        ; SET SEGMENT
  380 0165 FF                      MOV      A,R7        ; RESTORE DIGIT NUMBER
  381 0166 0300                    ADD      A,#DTBL&0FFH ; DIGIT CONTROLL BASE 
  382 0168 E3                      MOVP3    A,@A        ; GET DIGIT CONTROL
  383 0169 3A                      OUTL     P2,A        ; DIGIT ON
  384                   ;
  385 016A 42                      MOV      A,T         ; GET TIMER COUNT
  386 016B 03CC                    ADD      A,#204      ; 180Hz, FOR SOME REASO
  387 016D 62                      MOV      T,A         ; SET TIMER COUNT
  388 016E 1F                      INC      R7          ; INCREMENT DIGIT FOR N
  389 016F 93                      RETR                 ; EXIT INTERRUPT
  390                   ;
  391 0300                         ORG      300H
  392                   ;       DIGIT CONTROLL TABLE
  393 0300 80402010     DTBL       DB       80H,40H,20H,10H
  394                   ;
  395                   ;       SEGMENT IMAGE TABLE
  396 0304 8FBF4F2F     LTBL       DB       BOT0, BOT1, BOT2, BOT3
  397 0308 3F2F0FBF                DB       BOT4, BOT5, BOT6, BOT7
  398 030C 0F2F1F0F                DB       BOT8, BOT9, BOTA, BOTB
  399 0310 CF0F4F5F                DB       BOTC, BOTD, BOTE, BOTF
  400 0314 E3F7E6E6     UTBL       DB       TOP0, TOP1, TOP2, TOP3
  401 0318 F2EAEAE7                DB       TOP4, TOP5, TOP6, TOP7
  402 031C E2E2E2FA                DB       TOP8, TOP9, TOPA, TOPB
  403 0320 EBFAEAEA                DB       TOPC, TOPD, TOPE, TOPF
  404 0324 12B72A26     FTBL       DB       FON0, FON1, FON2, FON3
  405 0328 87464237                DB       FON4, FON5, FON6, FON7
  406 032C 020603C2                DB       FON8, FON9, FONA, FONB
  407 0330 5AA24A4B                DB       FONC, FOND, FONE, FONF
  408                   ;
  409                   ;       VARIABLES (RAM)
  410 0020                         ORG      20H
  411 0020              TICK       DS       1           ; INCREMENT 45/SEC
  412 0021              VRAM       DS       4           ; IMAGE
  413 0025              TIMG       DS       4           ; TEMPORARY IMAGE
  414 0029              NNOW       DS       2           ; NUMERIC
  415 002B              NNEW       DS       2           ; NUMERIC FOR UPDATE
  416                   ;
  417 002D                         END
